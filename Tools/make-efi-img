#!/bin/bash

#
#    gather files (or at least get size)
#    make and mount filesystem
#    copy files to fs
#    edit grub.cfg
#    umount
#    copy to iso directory

ME=${0##*/}

WORK_DIR="/tmp/$ME"

INPUT_FILE_LIST="
EFI/BOOT/bootx64.efi
EFI/BOOT/fallback.efi
EFI/BOOT/grubx64.efi
boot/grub/grub.cfg"

OUTPUT_FILE="boot/grub/efi.img"
GRUB_CFG="boot/grub/grub.cfg"

MAX_MARGIN=500 # in Kilobytes

usage() {
    local ret=${1:-0}

    cat<<Usage
Usage: $ME <directory>

Create a efi.img fat32 filesystem-on-a-file containing:
$(echo "$INPUT_FILE_LIST" | sed "s/^/    /")
Usage
    exit $ret
}

main() {
    [ $# -eq 1 ] || usage

    local dir=${1%/}

    test -d $dir || fatal "$dir is not a directory"

    local file full needed=0
    for file in $INPUT_FILE_LIST; do
        full=$dir/$file
        needed=$((needed + $(duk_size $full)))
    done
    echo "Kilobytes needed: $needed"

    local margin  mp="$WORK_DIR/mp" img="$dir/$OUTPUT_FILE"
    for margin in $(seq 10 10 $MAX_MARGIN); do
        local size=$((needed + margin))
        echo "Try size: $size  margin: $margin"
        make_efi_img "$img" "$mp" "$INPUT_FILE_LIST" $size 2>/dev/null
        local ret=$?
        sudo umount "$mp"
        rmdir "$mp"
        rmdir "$WORK_DIR"
        [ $ret -eq 0 ] || continue

        echo -e "\n$ME created $img"
        return 0
    done
    echo "$ME Failed!"
    return 2
}

make_efi_img() {
    local  img=$1  mp=$2  list=$3  size=$4

    dd if=/dev/zero of="$img" bs=1K count=$size
    mkfs.fat -n "EFI IMAGE" "$img" >/dev/null

    mkdir -p "$mp"
    sudo mount -o loop "$img" "$mp"
    local targ
    for file in $list; do
        full="$dir/$file"
        targ="$mp/$file"
        sudo mkdir -p "$(dirname "$targ")" || return 1
        sudo cp "$full" "$targ"            || return 1
    done

    local full_grub="$mp/$GRUB_CFG"
    sudo sed -i "1 iset root=(hd0)" "$full_grub"
    return 0
}

duk_size() {
    du -kc "$@" | tail -n1 | awk '{print $1}'
}

fatal() {
    printf "$@" >&2
    exit 3
}

main "$@"
